// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package exchange

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExchangeServiceClient is the client API for ExchangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeServiceClient interface {
	GetRates(ctx context.Context, in *RatesIn, opts ...grpc.CallOption) (*RatesOut, error)
	UpdateCurrencies(ctx context.Context, in *UpdateCurrency, opts ...grpc.CallOption) (*Status, error)
	GetAllCurrencyRates(ctx context.Context, in *AllCurrencyRatesIn, opts ...grpc.CallOption) (*AllCurrencyRatesOut, error)
	AddCurrencyRate(ctx context.Context, in *AddCurrencyRateIn, opts ...grpc.CallOption) (*CurrencyRates, error)
	DeleteCurrencyRate(ctx context.Context, in *DeleteCurrencyRateIn, opts ...grpc.CallOption) (*Status, error)
	HealthCheck(ctx context.Context, opts ...grpc.CallOption) (ExchangeService_HealthCheckClient, error)
}

type exchangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeServiceClient(cc grpc.ClientConnInterface) ExchangeServiceClient {
	return &exchangeServiceClient{cc}
}

func (c *exchangeServiceClient) GetRates(ctx context.Context, in *RatesIn, opts ...grpc.CallOption) (*RatesOut, error) {
	out := new(RatesOut)
	err := c.cc.Invoke(ctx, "/exchange.ExchangeService/GetRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) UpdateCurrencies(ctx context.Context, in *UpdateCurrency, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/exchange.ExchangeService/UpdateCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) GetAllCurrencyRates(ctx context.Context, in *AllCurrencyRatesIn, opts ...grpc.CallOption) (*AllCurrencyRatesOut, error) {
	out := new(AllCurrencyRatesOut)
	err := c.cc.Invoke(ctx, "/exchange.ExchangeService/GetAllCurrencyRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) AddCurrencyRate(ctx context.Context, in *AddCurrencyRateIn, opts ...grpc.CallOption) (*CurrencyRates, error) {
	out := new(CurrencyRates)
	err := c.cc.Invoke(ctx, "/exchange.ExchangeService/AddCurrencyRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) DeleteCurrencyRate(ctx context.Context, in *DeleteCurrencyRateIn, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/exchange.ExchangeService/DeleteCurrencyRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) HealthCheck(ctx context.Context, opts ...grpc.CallOption) (ExchangeService_HealthCheckClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExchangeService_ServiceDesc.Streams[0], "/exchange.ExchangeService/HealthCheck", opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeServiceHealthCheckClient{stream}
	return x, nil
}

type ExchangeService_HealthCheckClient interface {
	Send(*Status) error
	Recv() (*Status, error)
	grpc.ClientStream
}

type exchangeServiceHealthCheckClient struct {
	grpc.ClientStream
}

func (x *exchangeServiceHealthCheckClient) Send(m *Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exchangeServiceHealthCheckClient) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExchangeServiceServer is the server API for ExchangeService service.
// All implementations should embed UnimplementedExchangeServiceServer
// for forward compatibility
type ExchangeServiceServer interface {
	GetRates(context.Context, *RatesIn) (*RatesOut, error)
	UpdateCurrencies(context.Context, *UpdateCurrency) (*Status, error)
	GetAllCurrencyRates(context.Context, *AllCurrencyRatesIn) (*AllCurrencyRatesOut, error)
	AddCurrencyRate(context.Context, *AddCurrencyRateIn) (*CurrencyRates, error)
	DeleteCurrencyRate(context.Context, *DeleteCurrencyRateIn) (*Status, error)
	HealthCheck(ExchangeService_HealthCheckServer) error
}

// UnimplementedExchangeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedExchangeServiceServer struct {
}

func (UnimplementedExchangeServiceServer) GetRates(context.Context, *RatesIn) (*RatesOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRates not implemented")
}
func (UnimplementedExchangeServiceServer) UpdateCurrencies(context.Context, *UpdateCurrency) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrencies not implemented")
}
func (UnimplementedExchangeServiceServer) GetAllCurrencyRates(context.Context, *AllCurrencyRatesIn) (*AllCurrencyRatesOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCurrencyRates not implemented")
}
func (UnimplementedExchangeServiceServer) AddCurrencyRate(context.Context, *AddCurrencyRateIn) (*CurrencyRates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCurrencyRate not implemented")
}
func (UnimplementedExchangeServiceServer) DeleteCurrencyRate(context.Context, *DeleteCurrencyRateIn) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrencyRate not implemented")
}
func (UnimplementedExchangeServiceServer) HealthCheck(ExchangeService_HealthCheckServer) error {
	return status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}

// UnsafeExchangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeServiceServer will
// result in compilation errors.
type UnsafeExchangeServiceServer interface {
	mustEmbedUnimplementedExchangeServiceServer()
}

func RegisterExchangeServiceServer(s grpc.ServiceRegistrar, srv ExchangeServiceServer) {
	s.RegisterService(&ExchangeService_ServiceDesc, srv)
}

func _ExchangeService_GetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatesIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).GetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange.ExchangeService/GetRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).GetRates(ctx, req.(*RatesIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_UpdateCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).UpdateCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange.ExchangeService/UpdateCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).UpdateCurrencies(ctx, req.(*UpdateCurrency))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_GetAllCurrencyRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllCurrencyRatesIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).GetAllCurrencyRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange.ExchangeService/GetAllCurrencyRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).GetAllCurrencyRates(ctx, req.(*AllCurrencyRatesIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_AddCurrencyRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCurrencyRateIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).AddCurrencyRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange.ExchangeService/AddCurrencyRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).AddCurrencyRate(ctx, req.(*AddCurrencyRateIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_DeleteCurrencyRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrencyRateIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).DeleteCurrencyRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange.ExchangeService/DeleteCurrencyRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).DeleteCurrencyRate(ctx, req.(*DeleteCurrencyRateIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_HealthCheck_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExchangeServiceServer).HealthCheck(&exchangeServiceHealthCheckServer{stream})
}

type ExchangeService_HealthCheckServer interface {
	Send(*Status) error
	Recv() (*Status, error)
	grpc.ServerStream
}

type exchangeServiceHealthCheckServer struct {
	grpc.ServerStream
}

func (x *exchangeServiceHealthCheckServer) Send(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exchangeServiceHealthCheckServer) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExchangeService_ServiceDesc is the grpc.ServiceDesc for ExchangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchange.ExchangeService",
	HandlerType: (*ExchangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRates",
			Handler:    _ExchangeService_GetRates_Handler,
		},
		{
			MethodName: "UpdateCurrencies",
			Handler:    _ExchangeService_UpdateCurrencies_Handler,
		},
		{
			MethodName: "GetAllCurrencyRates",
			Handler:    _ExchangeService_GetAllCurrencyRates_Handler,
		},
		{
			MethodName: "AddCurrencyRate",
			Handler:    _ExchangeService_AddCurrencyRate_Handler,
		},
		{
			MethodName: "DeleteCurrencyRate",
			Handler:    _ExchangeService_DeleteCurrencyRate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HealthCheck",
			Handler:       _ExchangeService_HealthCheck_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/exchange/main.proto",
}
